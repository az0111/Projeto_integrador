esphome:
  name: admin

esp32:
  board: vintlabs-devkit-v1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "Iot123456789*"

ota:
  - platform: esphome
    password: "Iot123456789*"

wifi:
  ssid: "IoT05"
  password: "Iot123456789*"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "admin"
    password: "Iot123456789*"


web_server:
  port: 80

captive_portal:
# esp32_ble_tracker - Componente principal para rastreamento de Bluetooth Low Energy (BLE) [2].
esp32_ble_tracker:
  # max_connections (Opcional): Número máximo de slots de conexão BLE a serem usados [5].
  # Recomendado não exceder 5 slots para evitar problemas de memória [5].
  max_connections: 3

  # binary_sensor - Plataforma que permite rastrear a presença de um dispositivo BLE [12].
#binary_sensor:
    # Exemplo de rastreamento de presença baseado no endereço MAC do seu celular.
    # Esta é a forma mais comum se o seu celular não randomizar o MAC.
    #- platform: ble_presence
      # mac_address (Obrigatório, se não usar irk, service_uuid ou ibeacon_uuid):
      # Substitua 'XX:XX:XX:XX:XX:XX' pelo ENDEREÇO MAC REAL do seu celular que você encontrou nos logs [1, 9].
    #  mac_address: 68:25:DD:47:C3:B4
      # name: Nome amigável para este sensor no Home Assistant ou logs [1].
    #  name: "Celular MIO BLE"
      # min_rssi (Opcional): Nível mínimo de RSSI (Received Signal Strength Indicator)
      # para o componente reportar que o dispositivo está presente [1, 3].
      # Um valor mais negativo significa sinal mais fraco. Ex: -80dB (padrão se não especificado) [1].
    #  min_rssi: -75dB # Ajuste conforme a sensibilidade desejada.
      # timeout (Opcional): O atraso após a última detecção do dispositivo
      # antes de publicar o estado de "não presente" [1, 3]. O padrão é 5 minutos [3].
    #  timeout: 30s # Exemplo: Considerar "não presente" após 30 segundos sem detecção.

binary_sensor:
  - platform: ble_presence
    ibeacon_uuid: 'f8f664a0-da61-438e-81d6-121df307fde7'
    name: "Celular Carla iBeacon"
    ibeacon_major: 100
    ibeacon_minor: 40004
    timeout: 30s

    # --- Opções Alternativas de Rastreamento (escolha uma, não todas) ---

    # Se o seu celular randomizar o endereço MAC, você pode tentar rastrear por Service UUID.
    # Você precisaria configurar o seu celular para anunciar um Service UUID específico
    # (por exemplo, usando um aplicativo de iBeacon que também permite Service UUIDs personalizados).
    # - platform: ble_presence
    #   # service_uuid (Obrigatório, se não usar mac_address, irk ou ibeacon_uuid):
    #   # Substitua '11aa' pelo Service UUID real do seu celular. Pode ser 16, 32 ou 128 bits [1, 9, 10].
    #   service_uuid: '1234' # Exemplo de Service UUID de 16 bits.
    #   name: "Celular do Usuário por Service UUID"
    #   timeout: 30s

    # Se o seu celular puder atuar como um iBeacon (via app), você pode rastreá-lo por iBeacon UUID.
    # - platform: ble_presence
    #   # ibeacon_uuid (Obrigatório, se não usar mac_address, irk ou service_uuid):
    #   # Substitua pelo iBeacon UUID real do seu celular [1, 10].
    #   ibeacon_uuid: 'aaaaaaaa-bbbb-cccc-dddd-eeeeeeeeeeee'
    #   name: "Celular do Usuário por iBeacon"
    #   # ibeacon_major (Opcional): Identificador major do iBeacon [3, 10].
    #   # ibeacon_major: 1
    #   # ibeacon_minor (Opcional): Identificador minor do iBeacon [3].
    #   # ibeacon_minor: 10
    #   timeout: 30s

  # sensor - Você pode adicionar sensores adicionais para coletar dados específicos, como o RSSI [13].
sensor:
    # Este sensor reportará o valor RSSI (força do sinal) do seu celular.
    - platform: ble_rssi
      # mac_address: Substitua pelo ENDEREÇO MAC REAL do seu celular [13].
      mac_address: 68:25:DD:47:C3:B4
      # name: Nome amigável para este sensor.
      name: "RSSI Celular do Usuário"    
    

    # Example configuration.yaml entry
#device_tracker:
 #- platform: bluetooth_tracker
